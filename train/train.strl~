% export ESTEREL=/Vrac/PC2R/esterelv5_92
% export PATH=$ESTEREL/bin:$PATH:.
% esterel train.strl -B train -simul
% gcc -m32 -o train train.c -L/Vrac/PC2R/esterelv5_92/lib -l csimul
% $ ./train 
% train> ;;;

% bibliothèque libcsimul.a dans /Vrac/PC2R/esterelv5_92/lib/
% -m32 indique bits, si problème essayez sans
% http://www-sop.inria.fr/esterel.org/

% à éviter :
% abort
%   emit SOS; % possible dans les prochains tick
% when SOS
% ainsi que en croisé entre modules
% a la place - trap ou ...

% si un signal input, garder le partout
% on peut émettre signal input, on peut attendre signal output

% On ne peut pas dans le même tick
% - attendre/verifier signal A pour émettre un signal B dans un bloc/module
% - attendre/vérifier B pour émettre A dans un autre bloc/module
% => cyclic: presence -> PRESENCE -> securite -> FREINER -> presence
% pause pour casser cyclic

module securite :
inputoutput PRESENCE;             
inputoutput FREINER : integer;   
inputoutput SOS; 

var cpt :=0 : integer in
trap TRAP_SOS in
loop
  present PRESENCE then 
    cpt := 0
  end present;
  cpt:=cpt+1;
  if(cpt>10) then
    exit TRAP_SOS; 
  end if
each tick
end trap;
pause; 
emit FREINER(3);
emit SOS
end var

end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% OK
module presence :
inputoutput ACCELERER : integer;
inputoutput FREINER : integer;    
inputoutput PRESENCE;           
inputoutput SOS;
  
trap TRAP_SOS in
loop
  present SOS then
    exit TRAP_SOS
  end present;
  present [ ACCELERER or FREINER ] then 
    emit PRESENCE
  end present;
each tick
end trap  
end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module controle :
inputoutput ACCELERER : integer;      
inputoutput FREINER : integer;      
inputoutput PRESENCE;              
inputoutput VITESSE : integer;
inputoutput SOS;

var vitesse:=0 : integer in
trap TRAP_SOS in
var vitesseBut:=0 : integer in % 0 sinon "variable read before being written"
var deltaVitesse:=0 : integer in 
var cpt :=0 : integer in
  loop
    present SOS then
      exit TRAP_SOS
    end present;
    present ACCELERER then 
      if ?ACCELERER=1 then
        vitesseBut:=1;
        deltaVitesse:=1
      end if;
      if ?ACCELERER=2 then
        vitesseBut:=5;
        deltaVitesse:=2
      end if;
      if ?ACCELERER=3 then
        vitesseBut:=10;
        deltaVitesse:=2
      end if;
      cpt:=0
    end present;
    present FREINER then
      vitesseBut:=0;
      deltaVitesse:=(-1)*(?FREINER);
      cpt:=0
    end present;

    if vitesse>vitesseBut then
       if vitesse+deltaVitesse>=vitesseBut then
         vitesse:=vitesse+deltaVitesse
       else vitesse:=vitesseBut
       end if;
    end if;
    if vitesse<vitesseBut then 
      if vitesse+deltaVitesse<=vitesseBut then 
        vitesse:=vitesse+deltaVitesse
      else vitesse:=vitesseBut
      end if;
    end if;

    emit VITESSE(vitesse);
    cpt:=cpt+1;
    if cpt=10 then
      emit PRESENCE;
      cpt:=0;
    end if;
  each tick
end var
end var
end var
handle TRAP_SOS do
repeat 4 times
  if vitesse>0 then
    if vitesse-3>0 then
       vitesse:=vitesse-3
    else vitesse:=0
    end if;
  end if;
  emit VITESSE(vitesse);
  pause;
end repeat
end trap
end var
  
end module

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
module train :
inputoutput ACCELERER : integer;
inputoutput FREINER   : integer;
inputoutput VITESSE   : integer;
inputoutput PRESENCE;
inputoutput SOS;

run securite
||
run presence
||
run controle

end module
